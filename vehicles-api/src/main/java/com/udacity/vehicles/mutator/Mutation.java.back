package com.udacity.vehicles.mutator;

import com.coxautodev.graphql.tools.GraphQLMutationResolver;
import com.udacity.vehicles.domain.car.Car;
import com.udacity.vehicles.domain.car.CarRepository;
import com.udacity.vehicles.service.CarNotFoundException;
import org.springframework.stereotype.Component;

import java.util.Optional;

@Component
public class Mutation implements GraphQLMutationResolver {
    private CarRepository carRepository;

    public Mutation(CarRepository carRepository) {
        this.carRepository = carRepository;
    }

    public boolean deleteCarById(Long id) throws CarNotFoundException {
        boolean deleted = false;
        Iterable<Car> allCars = carRepository.findAll();
        // Loop through all dogs to check their breed
        for (Car c:allCars) {
                carRepository.delete(c);
                deleted = true;
        }
        // Throw an exception if the breed doesn't exist
        if (!deleted) {
            throw new CarNotFoundException("Car Not Found");
        }
        return deleted;
    }
    public Car updateCarById(Long id){
        Optional<Car> optionalCar =
                carRepository.findById(id);

        if(optionalCar.isPresent()) {
            Car car = optionalCar.get();
            carRepository.save(car);
            return car;
        } else {
            throw new CarNotFoundException("Car Not Found");
        }
    }
}
